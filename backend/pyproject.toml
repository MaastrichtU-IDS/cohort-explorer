[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
requires-python = ">=3.9"
version = "0.0.1"
name = "cohort-explorer-backend"
description = "Backend for the iCARE4CVD Cohort Explorer."
license = "MIT"
authors = [
    { name = "Vincent Emonet", email = "vincent.emonet@gmail.com" },
]
keywords = [
    "RDF",
    "Data mapping",
    "Cohort data",
]
classifiers = [
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
]

dependencies = [
    "decentriq-platform >=0.35.0",
    "thefuzz",
    "curies",
    "pandas[excel,spss]",
    "pyarrow",
    "openpyxl",
    "fastapi",
    "uvicorn",
    "python-multipart",
    "python-jose[cryptography]",
    "pyyaml !=6.0.0,!=5.4.0,!=5.4.1", # https://github.com/yaml/pyyaml/issues/724
    "httpx",
    "oxrdflib",
    "SPARQLWrapper",
    "python-dotenv",
    # "pydantic >=2.0.0",
    # "pydantic-settings",
    # NOTE: dependencies for mapping-generation are below
    "tqdm",
    "torch",
    "transformers",
    "python-dotenv",
    "qdrant-client",
    "langchain",
    "langchain_openai",
    "pydantic",
    "langchain_qdrant",
    "typing-extensions",
    "openai",
    "qdrant-client",
    "langchain-community",
    "faiss-cpu",
    "langchain-together",
    "simstring-fast",
    "langchain_ollama",
    "langchain_huggingface",
    "langchain_groq",
    "fastembed",
    # "fastembed-gpu",
    "adapters",
    "langdetect",
    "rank_bm25",
    "json-repair",
    "pytorch_metric_learning"
    # "ctransformers",
    # "ragatouille",
    # "tiktoken",
]


[project.optional-dependencies]
test = [
    "pytest >=7.4.0",
    "pytest-cov >=3.0.0",
    "ruff",
    "mypy >=1.4.1",
    "pip-tools",
    # "csvw-ontomap @ git+https://github.com/vemonet/csvw-ontomap.git",
]


[project.urls]
Homepage = "https://github.com/MaastrichtU-IDS/cohort-explorer"
Documentation = "https://github.com/MaastrichtU-IDS/cohort-explorer"
History = "https://github.com/MaastrichtU-IDS/cohort-explorer/releases"
Tracker = "https://github.com/MaastrichtU-IDS/cohort-explorer/issues"
Source = "https://github.com/MaastrichtU-IDS/cohort-explorer"


# ENVIRONMENTS AND SCRIPTS
[tool.hatch.envs.default]
features = [
    "test",
]
post-install-commands = []

[tool.hatch.envs.default.scripts]
dev = "DEV_MODE=true uvicorn src.main:app --port 3000 --reload {args}"
fmt = [
    "ruff-format src",
    "ruff src --fix",
    # "mypy",
]
test = [
    "fmt",
    "pytest {args}",
]
cov = [
    "fmt",
    "pytest --cov-report html {args}",
]
cov-check = [
    "python -c 'import webbrowser; webbrowser.open(\"http://0.0.0.0:3000\")'",
    "python -m http.server 3000 --directory ./htmlcov",
]
compile = "pip-compile -o requirements.txt pyproject.toml"
# TODO: use uv
# uv venv
# uv pip install .
# uv pip compile pyproject.toml -o requirements.txt
# uv run ruff format
# uv run ruff check src --fix


## TOOLS
[tool.hatch.build.targets.wheel]
packages = ["src"]

# If you need to import packages from git URLs:
# [tool.hatch.metadata]
# allow-direct-references = true


[tool.mypy]
files = ["./"]
strict = true
implicit_reexport = true
follow_imports = "normal"
ignore_missing_imports = true
pretty = true
show_column_numbers = true
warn_no_return = true
warn_unused_ignores = true
warn_redundant_casts = true
disallow_untyped_calls = true
disallow_untyped_defs = true
disallow_any_generics = true


[tool.pytest.ini_options]
addopts = [
    "-vvv",          # Verbose level 3
    "--durations=10", # Show 10 slowest tests durations
    "--cov=src",
    "--color=yes",
    "--cov-report=term-missing",
    # "--cov-fail-under=85",
]
filterwarnings = [
    "ignore::DeprecationWarning:httpx.*:",
]


# https://github.com/charliermarsh/ruff#supported-rules
[tool.ruff]
src = ["."]
target-version = "py39"
line-length = 120

[tool.ruff.lint]
select = [
    "I",     # isort
    "N",     # pep8-naming
    "S",     # bandit
    "A",     # flake8-builtins
    "YTT",   # flake8-2020
    "B",     # flake8-bugbear
    "C",     # flake8-comprehensions
    "ICN",   # flake8-import-conventions
    "SIM",   # flake8-simplify
    "TID",   # flake8-tidy-imports
    "Q",     # flake8-quotes
    # "FBT",   # flake8-boolean-trap
    "F",     # pyflakes
    "UP",    # pyupgrade
    "E",     # pycodestyle errors
    "W",     # pycodestyle warnings
    "PLC",   # pylint convention
    "PLE",   # pylint error
    # "PLR",   # pylint refactor Magic value used in comparison, consider replacing 400 with a constant variable
    "PLW",   # pylint warning
    "RUF",   # ruff specific
    "T",
]
ignore = [
    "E501", # line too long
    "C901", # too complex
    "T201", # do not use print
    "B008", # do not perform function calls in argument defaults
    "E722", "S110", # Do not use bare `except`
    "B904", "S104", "S108",
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["I", "F401"] # module imported but unused
# Tests can use magic values, assertions, and relative imports
"tests/**/*" = ["PLR2004", "S101", "S105", "TID252"]

[tool.ruff.lint.mccabe]
max-complexity = 10
